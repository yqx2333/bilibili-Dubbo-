# 配置端口号
server:
  port: 9999

# 配置Dubbo
# 暴漏服务用 @Service注解
# 消费服务用 @Reference注解
dubbo:
  application:
    name: boot-order-service-consumer   # 配置Dubbo服务名称

  registry:
    address: zookeeper://127.0.0.1:2181 # 连接注册中心 端口号为2181
    # 设置为false时,即使注册中心不存在也不会报错.
    check: false

  monitor:
    protocol: registry                  # 去注册中心自动找监控中心

  # <dubbo:reference interface="com.yqx.gmall.service.UserService" check="false" /> 单个服务不检查
  # <dubbo:consumer check="false" />  配置消费者统一规则 所有的服务都不检查
  # reference是为单个消费设置   consumer是为所有消费端设置
  consumer:                             # 启动时检查 服务消费者在启动的时候会去注册中心检查服务提供者是否存在
    check: false                        # 如果不存在则会报错 默认为true 改为false即可
    # timeout: 超时时间,默认为1000ms
    # 当消费端在调用服务提供端的时候,为了防止提供端方法调用慢,导致大量线程阻塞 可以设置超时时间 提升效率
    timeout: "3000"

    # timeout一般配合retries一起使用  重试次数 多试几次    [0代表不重试]
    # 如果设置为3 那么如果第一次调用失败了 那么最多还会再调用三次 一共四次(包含第一次)
    # 比如订单消费端访问用户提供端 且用户提供端有多个 那么重试时会去别的用户提供端重试!
    # 在幂等方法可以设置重试次数 (方法无论运行多少次,跟运行一次的效果是一样的)  [查询\删除\修改]
    # 非幂等方法不可以设置重试次数 (方法每一次运行都会产生新的结果)  [添加]
    retries: 3                          # 不包含第一次

    # 设置版本号
    version:

    # 本地存根代码测试
    stub: com.yqx.gmall.stub.UserServiceStub

  scan:
    base-packages: # 开启包扫描 添加该注解后扫描指定的包 可以去掉@EnableDubbo注解了!









# 为指定的方法 设置超时时间
#<dubbo:reference>
#  <dubbo:method name="指定的方法名称" timeout="超时时间"/>
#<dubbo:reference/>


# XML配置覆盖关系   方法方法方法方法最优先!
#  明确指定方法了 那么最优先;
#  方法级最优先(精确优先)   || 方法级优先 接口级次之 全局配置最低
#  消费者配置优先          || 如果级别一样 则消费方优先 提供方次之

# Version 可以在@Service注解中配置 [多版本机制]
# 版本号机制 比如我写了一个UserServiceImpl1 我可以把它版本号设置为 1.0.0       \\ 在低压力时间段，先升级一半提供者为新版本
# 现在又写了一个新版本UserServiceImpl2     我可以把它版本号设置为 2.0.0       \\ 再将所有消费者升级为新版本
# 在服务消费端 设置version=1.0.0 那么调用的就是UserServiceImpl1             \\ 然后将剩下的一半提供者升级为新版本
# 可以设置 version=*   那么就是新老版本随机调用


# 服务存根
# 我们都是从 consumer消费端 去调用 provider服务提供端
# 每次要调用都是要连向远程的provider 但如果我们想在连接前 做一些参数验证或者缓存
# 也就是远程调用接口 在我(服务消费者)本地也有一份存根代码
# 本地存根代码在调用之前做一些判断 或者添加一些小功能等等
# 在调用之前 现在本地存根代码上进行 如果满足要求则调用远程服务; 如果不满足则不调用即可


# SpringBoot与Dubbo整合的三种方式
#   1. 导入dubbo-starter依赖,在application.properties文件中配置属性;
#         使用@Service注解暴漏服务      使用@Reference注解引用服务
#         使用时必须在SpringBoot的启动类上添加 @EnableDubbo注解 代表开启支持Dubbo注解的功能
#   2. 方法级别的配置
#         导入dubbo-starter依赖
#         保留dubbo.xml配置文件  /比如将provider.xml文件直接放在resource包下
#         直接将所有的配置在xml文件中配置即可 application.properties文件可删除
#         使用时需要在启动类上添加 @ImportResource(locations="classpath:provider.xml") 注解 代表扫描类路径下的provider.xml文件
#         也可以将Dubbo中的@Service注解 取消使用;
#   3. 使用注解API配置
#         将每一个组件手动创建到容器中 需要自己写一个配置类


# Dubbo高可用
#  Dubbo直连 Zookeeper宕机与Dubbo直连
#  即Zookeeper注册中心宕机,还可以消费dubbo暴漏的服务 [只要消费端访问提供端一次,就会在消费端产生缓存]
#  面试:
#     Zookeeper宕机了,那么消费者能不能调用提供者的服务?    --能 因为又本地缓存
#     没有注册中心,能不能掉服务?      --能 可以使用Dubbo直连方式
# Dubbo直连 即在@Reference注解上 直接通过url注明地址可端口号即可
#  @Reference( url = "127.0.0.1:20880")


# Dubbo负载均衡策略
# 1. 随机[默认]
#     顾名思义,按照随机方式去访问;但我们可以配置weight权重,权重大的服务器被访问的几率也就越大;
# 2. 轮询  (loadbalance = "roundrobin")
#     按照顺序进行访问,即1,2,3,1,2,3... 但我们同样可以配置weight权重,但权重还是占一定规则的;
# 3. 最少活跃调用数
#     三台机器反应时间分别为100ms,300ms,800ms 那么下次访问的时候请求会到100ms的服务器上;
# 4. 一致性Hash
#     三台服务器 三个方法 getUser?uid=1 getUser?uid=2 getUser?uid=3
#     getUser?uid=1始终会访问第一台服务器 方法名参数名都一样,那么都会落在同一台服务器上
#     哪怕getUser?uid=1一直在访问,那么也只会访问对应的那台服务器,不会访问其他服务器


# Dubbo服务降级
# 1. mock=force:return+null 表示消费方对该服务的方法调用都返回null值,不发起远程调用;
#                           用来屏蔽比重要服务不可用时 对调用方的影响;
# 2. mock=return+null       表示消费方对该服务的方法在调用[失败]之后.再返回null,不抛异常;
#                           用来容忍不重要服务不稳定时 对调用方的影响;


# Dubbo服务降级
# 现在都是整合hystrix












